An array is given suppose,a=[3,5,8,2,19,12,7,11]
one have to find the longest subarray such that its element satisfies the 
condition: x[i]=x[i‐1]+x[i‐2]
if more than one subarray of is found of maximum length one has to print the array which starts
with the minimum element and if they are also same then the array with minimum second element
and so on.
if no subarray is found one has to print ‐1.
ans ‐
here the subarrays are [2,3,5,8], [3,8,11], [5,7,12,19]
the longest subarrays are ‐ [2,3,5,8], [5,7,12,19]
so expected ouput ‐ [2,3,5,8]
'''
a=[3,5,8,2,19,12,7,11,13]
#a=[0,2,5,8,100,2,3,5,8,13,11,5,8,13,21,34]
a[:]=sorted(a)
ss=[]
for i in range(len(a)):
    for j in range(i+1,len(a)):
        s=[]
        x=a[i]
        y=a[j]
        z=x+y
        while z in a[j+1:]:
            if len(s)==0:
                s.append(x)
                s.append(y)
                s.append(z)
            else:
                s.append(z)
            x=y
            y=z
            z=x+y
        if len(ss)<len(s):
            ss=s
if len(ss)!=0:
    print(ss)
else:
    print(-1)
